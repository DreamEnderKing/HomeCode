@page "/counter"
@inject IJSRuntime JSRuntime;
@inject Canvas2D Canvas;

<SetTitle title="Counter"></SetTitle>
<h1>Counter</h1><br />
<h3>
    We will calculate the value of Pi by many experiments.<br />
    I'll try .Net connecting javascript meanwhile.
</h3>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button><br />
<button class="btn btn-primary" style="display: none;" @onclick="IncrementRadius">Radius</button>
<p>Current count: @currentCount<br />
Inside count:@insideCount<br />
Pi Value:@Pi_Value</p>

<canvas id="canvas" width="400" height="400"></canvas>


@code {
    private double currentCount = 0;
    private double insideCount = 0;
    private int radius = 1;
    private string Pi_Value = "Undefined";
    private const int times = 500;
    private bool inited = false;
    private void IncrementRadius() {
        radius += 1;
    }
    private async void IncrementCount() {
        currentCount += times;
        if(!inited) {
            await JSRuntime.InvokeVoidAsync("LoadCanvas", "canvas");
            await Canvas.DrawRect((0, 0), (400, 400), new SolidBrush((0, 0, 0)));
            await Canvas.FillCircle((0, 0), (400, 400), new SolidBrush((0, 255, 0)));
            inited = true;
        }
        Task t_Draw = new Task(async ()=>{
            int x = 0;
            int y = 0;
            Random random = new Random();
            for(int i = 1; i<=times; i++)
            {
                x = random.Next(0, 400);
                y = random.Next(0, 400);
                await Canvas.FillRect((x, y), (radius, radius), new SolidBrush((255, 0, 0)));
                if (Math.Pow(x - 200, 2) + Math.Pow(y - 200, 2) <= 40000)
                {
                    insideCount++;
                }
            }
        });
        t_Draw.Start();
        t_Draw.Wait();
        Pi_Value = (insideCount / currentCount * 4).ToString();
    }

    protected override async Task OnInitializedAsync() {
        Canvas.Init(JSRuntime);
        await JSRuntime.InvokeVoidAsync("LoadCanvas", "canvas");
    }
}
